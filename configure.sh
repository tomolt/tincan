#!/usr/bin/bash
# vim: noet

PROJ_ROOT="$(dirname $(realpath "$0"))"
PROJ_BUILD=$(pwd)
MAKEFILE="$PROJ_BUILD/Makefile"

var_default() {
	[ -z ${!1} ] && eval "$1=\$2"
}

add_var() {
	echo "$1=${!1}" >>"$MAKEFILE"
}

add_source_dir() {
	srcs=$(cd "$PROJ_ROOT" && find "$1" -name "*.c")
	for s in $srcs; do
		mkdir -p "$PROJ_BUILD/$(dirname $s)"
	done
	cat <<END >>"$MAKEFILE"
${SUBPROJ}_OBJS= \\
$(for s in $srcs; do echo ${s%.c}.o \\; done)

$1/%.o: \$(PROJ_ROOT)/$1/%.c
	@echo CC \$@
	@\$(CC) \$(CFLAGS) \$< -c -o \$@ -MMD -MP $2

-include \$(${SUBPROJ}_OBJS:.o=.d)

END
}

add_static_lib() {
	cat <<END >>"$MAKEFILE"
lib$1.a: \$(${SUBPROJ}_OBJS)
	@echo AR \$@
	@\$(AR) \$(ARFLAGS) \$@ \$^

.PHONY: ${SUBPROJ}_clean
${SUBPROJ}_clean:
	rm -f lib$1.a \$(${SUBPROJ}_OBJS) \$(${SUBPROJ}_OBJS:.o=.d)

END
}

add_executable() {
	cat <<END >>"$MAKEFILE"
$1.elf: \$(${SUBPROJ}_OBJS)
	@echo LD \$@
	@\$(LD) \$(LDFLAGS) \$^ -o \$@ $2

.PHONY: ${SUBPROJ}_clean
${SUBPROJ}_clean:
	rm -f $1.elf \$(${SUBPROJ}_OBJS) \$(${SUBPROJ}_OBJS:.o=.d)

END
}

var_default "CC" "gcc"
var_default "LD" "gcc"
var_default "AR" "ar"
var_default "CFLAGS" "-g -Wall -Wextra -pedantic -fsanitize=undefined -std=gnu11"
var_default "LDFLAGS" "-g -Wall -Wextra -pedantic -fsanitize=undefined -std=gnu11"
var_default "ARFLAGS" "rcs"

echo "# Auto-generated by configure.sh" >"$MAKEFILE"

add_var "PROJ_ROOT"
add_var "CC"
add_var "LD"
add_var "AR"
add_var "CFLAGS"
add_var "LDFLAGS"
add_var "ARFLAGS"

cat <<END >>"$MAKEFILE"

.PHONY: all clean
all: libtincan.a demo.elf
clean: tincan_clean demo_clean

demo.elf: libtincan.a
END

SUBPROJ="tincan"
add_source_dir "src" "-I\$(PROJ_ROOT)/include"
add_static_lib "tincan"

SUBPROJ="demo"
add_source_dir "demo" "-I\$(PROJ_ROOT)/include -I\$(PROJ_ROOT)/demo/glad/include"
add_executable "demo" "-lm -ltincan -lglfw -L."

